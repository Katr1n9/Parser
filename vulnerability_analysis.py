import tkinter as tk
from tkinter import ttk
import pandas as pd
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
from docx import Document
from tkinter import messagebox
from io import BytesIO
from docx.shared import Inches

threat_counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}



def export_to_word():
    global threat_counts
    labels = ['Критический', 'Высокий', 'Средний', 'Низкий']
    try:
        doc = Document()
        doc.add_heading('Результаты анализа уязвимостей', level=1)
        table = doc.add_table(rows=5, cols=2)
        table.cell(0, 0).text = 'Уровень уязвимости'
        table.cell(0, 1).text = 'Количество уязвимостей'

        table.cell(1, 0).text = 'Критический'
        table.cell(1, 1).text = str(threat_counts['critical'])
        table.cell(2, 0).text = 'Высокий'
        table.cell(2, 1).text = str(threat_counts['high'])
        table.cell(3, 0).text = 'Средний'
        table.cell(3, 1).text = str(threat_counts['medium'])
        table.cell(4, 0).text = 'Низкий'
        table.cell(4, 1).text = str(threat_counts['low'])

        chart_type_combo = f_schedule.get()
        if chart_type_combo == "Круговая":
            buffer = BytesIO()
            fig, ax = plt.subplots()
            ax.pie(threat_counts.values(), labels=labels, autopct='%1.1f%%', startangle=90)
            ax.axis('equal')
            plt.savefig(buffer, format='png')
            plt.close()
            run = doc.add_paragraph().add_run()
            run.add_picture(buffer, width=Inches(5))
        elif chart_type_combo == "Столбчатая":
            buffer = BytesIO()
            fig, ax = plt.subplots()
            ax.bar(labels, threat_counts.values())
            ax.set_ylabel('Количество уязвимостей')
            plt.savefig(buffer, format='png')
            plt.close()
            run = doc.add_paragraph().add_run()
            run.add_picture(buffer, width=Inches(5))

        doc.save('results.docx')

        messagebox.showinfo("Экспорт завершен",
                            "Результаты анализа уязвимостей успешно экспортированы в файл results.docx")
    except Exception as e:
        messagebox.showerror("Ошибка при экспорте", f"Произошла ошибка при экспорте в Word: {e}")


def func_add():
    global threat_counts
    threat_counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
    try:
        keyword = entry_keyword.get().strip()  # Ключевое слово для поиска
        if not keyword:  # Проверка на пустое ключевое слово
            messagebox.showwarning("Пустое ключевое слово", "Пожалуйста, введите ключевое слово для поиска.")
            return
        # Читаем данные из файла Excel в DataFrame
        df = pd.read_excel('vullist.xlsx', header=2)  # Начинаем чтение с третьей строки (индекс 2)

        # Подсчитываем количество уязвимостей каждого уровня опасности
        for index, row in df.iterrows():
            if keyword.lower() in str(row['Название ПО']).lower() and pd.notna(row['Уровень опасности уязвимости']):
                if "Низкий" in row['Уровень опасности уязвимости']:
                    threat_counts['low'] += 1
                elif "Средний" in row['Уровень опасности уязвимости']:
                    threat_counts['medium'] += 1
                elif "Высокий" in row['Уровень опасности уязвимости']:
                    threat_counts['high'] += 1
                elif "Критический" in row['Уровень опасности уязвимости']:
                    threat_counts['critical'] += 1

        # Обновляем текст меток с количеством угроз
        label_result_K_R['text'] = str(threat_counts['critical'])
        label_result_H_R['text'] = str(threat_counts['high'])
        label_result_S_R['text'] = str(threat_counts['medium'])
        label_result_L_R['text'] = str(threat_counts['low'])

        for widget in frame_list.winfo_children():
            widget.destroy()
        if f_schedule.get() == "Круговая":
            plot_pie_chart()
        elif f_schedule.get() == "Столбчатая":
            plot_bar_chart()


    except Exception as e:
        print(f"Ошибка: {e}")


def plot_bar_chart():
    global threat_counts
    # Строим столбчатую диаграмму

    labels = ['Критический', 'Высокий', 'Средний', 'Низкий']
    counts = [threat_counts['critical'], threat_counts['high'], threat_counts['medium'], threat_counts['low']]
    fig = plt.figure(figsize=(6, 4))
    ax = fig.add_subplot()
    ax.bar(range(len(labels)), counts, tick_label=labels)
    canvas = FigureCanvasTkAgg(fig, master=frame_list)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)



def plot_pie_chart():
    # Строим круговую диаграмму
    labels = ['Критический', 'Высокий', 'Средний', 'Низкий']
    counts = [threat_counts['critical'], threat_counts['high'], threat_counts['medium'], threat_counts['low']]
    fig = plt.figure(figsize=(6, 4))
    ax = fig.add_subplot()
    ax.pie(counts, labels=labels, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')
    canvas = FigureCanvasTkAgg(fig, master=frame_list)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)


root = tk.Tk()
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)
root.title("Анализ уязвимостей ПО")
photo = tk.PhotoImage(file='bu.png')
root.iconphoto(False, photo)

frame_keyword = tk.Frame(root, bg="green")
frame_result = tk.Frame(root, bg="white")
frame_list = tk.Frame(root, bg="blue")

frame_keyword.grid(column=0, row=0, sticky="nswe")
frame_result.grid(column=1, row=0, sticky="nswe")
frame_list.grid(column=0, row=1, columnspan=2, sticky="nswe")

label_name_op = tk.Label(frame_keyword, text="Выберите нужное ПО")
f_name_op = ttk.Label(frame_keyword, width=20)
entry_keyword = tk.Entry(frame_keyword, width=30)
entry_keyword.grid(row=0, column=1, sticky="w", padx=10, pady=10)
label_schedule = tk.Label(frame_keyword, text="Выберите какую диаграмму необходимо построить")
f_schedule = ttk.Combobox(frame_keyword, values=["Круговая", "Столбчатая"], width=20, state="readonly")
btn_submit = tk.Button(frame_keyword, text="Поиск количества ошибок и построение графика", command=func_add)
btn_word_create = tk.Button(frame_keyword, text="Сохранить Word", command=export_to_word)

label_name_op.grid(row=0, column=0, sticky="w", padx=10, pady=10)
f_name_op.grid(row=0, column=1, sticky="w", padx=10, pady=10)
label_schedule.grid(row=2, column=0, sticky="w", padx=10, pady=10)
f_schedule.grid(row=2, column=1, sticky="w", padx=10, pady=10)
btn_submit.grid(row=3, column=0, columnspan=2, padx=10, pady=10)
btn_word_create.grid(row=4, column=1, padx=10, pady=10)

label_result_K = tk.Label(frame_result, text="Критический")
label_result_K_R = tk.Label(frame_result, text="0", font="Helvetica 14 bold")
label_result_H = tk.Label(frame_result, text='Высокий')
label_result_H_R = tk.Label(frame_result, text='0', font="Helvetica 14 bold")
label_result_S = tk.Label(frame_result, text="Средний")
label_result_S_R = tk.Label(frame_result, text='0', font="Helvetica 14 bold")
label_result_L = tk.Label(frame_result, text="Низкий")
label_result_L_R = tk.Label(frame_result, text='0', font="Helvetica 14 bold")
label_result_K.grid(row=0, column=0, sticky="e", padx=10, pady=10)
label_result_K_R.grid(row=0, column=1, sticky="w", padx=10, pady=10)
label_result_H.grid(row=1, column=0, sticky="e", padx=10, pady=10)
label_result_H_R.grid(row=1, column=1, sticky="w", padx=10, pady=10)
label_result_S.grid(row=2, column=0, sticky="e", padx=10, pady=10)
label_result_S_R.grid(row=2, column=1, sticky="w", padx=10, pady=10)
label_result_L.grid(row=3, column=0, sticky="e", padx=10, pady=10)
label_result_L_R.grid(row=3, column=1, sticky="w", padx=10, pady=10)

label_name_opz = tk.Label(frame_list, text="Напишите нужное ПО")
f_name_op = ttk.Label(frame_list, width=20)

root.mainloop()
